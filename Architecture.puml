@startuml

abstract TSInterpret {
}
interface base_model {
    model
    change:bool    
    model_path: str  
    backend: Enum
    init(model,change, model_path, backend)
    <<abstract>> predict(item)
    <<abstract>> load_model(model_path)
}

interface InterpretabilityBase {
    model
    init(model)
    <<abstract>> explain()
    <<abstract>> plot()
}


class PyTorchModel {

    predict(item)

}

class SklearnModel {

    predict(item)
}
class TensorflowModel {

    predict(item)
}
class Attribution {
     plot()
}
class Gradient {
    
}
class Pertubation {

}
class Surrogate {

}
class Instance {
  plot()
}

class Counterfactual {

}
class CEM {

}
class Anchor {
}

TSInterpret --> base_model
TSInterpret --> InterpretabilityBase
base_model --> PyTorchModel
base_model --> SklearnModel
base_model --> TensorflowModel
InterpretabilityBase --> Attribution
InterpretabilityBase --> Instance
Attribution --> Gradient
Attribution --> Pertubation
Attribution --> Surrogate
Instance --> Counterfactual 
Instance -->  CEM
Instance --> Anchor

@enduml